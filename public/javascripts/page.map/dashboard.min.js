var currentMarkType = null // 1 = Pin Drop, 2 = Area Mark, 3 = Circle Mark
var prevMarkType = null
var markPinDrops = []
var markArea = []
var markCircle = []
var drawingManager = null
var dateFormatText = 'DD, d MM, yy'
var dateFormatInput = 'dd/mm/yy'
var pageWrapper = $('#page-dashboard')
var pageLoading = $('#dashboard-loading')
var mapName = 'dashboard-map'
var selectHand = $('#mark-trigger-select')
var pinDrop = $('#mark-trigger-pin-drop')
var areaMark = $('#mark-trigger-area')
var circleMark = $('#mark-trigger-circle')
var currentMark = $('#mark-current')
var datepickerInput = $('#datepicker-input')
var datepickerButton = $('#datepicker-button')
var markerDelete = $('#btn-marker-delete')
var markerSave = $('#btn-marker-save')
var detailTitle = $('#detail-title')
var detailClose = $('#btn-detail-close')
var forceOpenDetail = false
var forceCloseCalendar = false
var selectedIndex = -1
var textPinName = $('#txt-pin-name')
var textPinSupervisor = $('#txt-pin-supervisor')
var conditionField = [
  {
    name: $('#0000-name'),
    condition: $('#0000-condition'),
    target: $('#0000-target'),
    status: $('#0000-status')
  }
]

function initMarkerIcon(marker){
  var iconImage = null
  var iconImageFocus = null

  if(marker.isAdd){
    iconImage = '/images/marker-pin-add.png'
    iconImageFocus = '/images/marker-pin-add-active.png'
  } else if(marker.isPass){
    iconImage = '/images/marker-pin-pass.png'
    iconImageFocus = '/images/marker-pin-pass-active.png'
  } else if(!marker.isPass){
    iconImage = '/images/marker-pin-notpass.png'
    iconImageFocus = '/images/marker-pin-notpass-active.png'
  }

  marker.setIcon(iconImage)
  marker.iconIdle = iconImage
  marker.iconFocus = iconImageFocus

  return marker
}

function initMarker(pin){
  var marker = null
  var markerField = []

  pin.fieldList.forEach(function(field){
    if(field.type == "NUMBER"){
      markerField.push({
        type: "NUMBER",
        name: field.name,
        condition: field.condition,
        target: field.target,
        value: (field.value) ? field.value : '-'
      })
    }
  })

  marker = new google.maps.Marker({
    index: markPinDrops.length,
    title: pin.name,
    position: {lat: pin.pos.lat, lng: pin.pos.lng},
    map: mapincGoogleMap[mapName],
    fieldList: markerField,
    supervisor: pin.supervisor,
    isPass: pin.isPass,
    isAdd: pin.isAdd
  })

  marker = initMarkerIcon(marker)

  google.maps.event.addListener(marker, 'click', function(e){
    selectedIndex = marker.index
    forceCloseCalendar = true
    datepickerButton.trigger('click')
    marker.setIcon(marker.iconFocus)
    pageWrapper.addClass('open-detail')
    detailTitle.text((marker.title) ? marker.title : 'New Record')
    textPinName.val(marker.title)
    textPinSupervisor.val(marker.supervisor)
    conditionField[0].name.val(marker.fieldList[0].name)
    conditionField[0].condition.val(marker.fieldList[0].condition || 'GT')
    conditionField[0].target.val(marker.fieldList[0].target)

    if(marker.isPass) conditionField[0].status.removeClass('alert-danger').addClass('alert-success')
    else conditionField[0].status.removeClass('alert-success').addClass('alert-danger')
    if(!marker.isAdd){
      conditionField[0].status.removeClass('hidden')
      conditionField[0].status.html(`Current Value : <strong>${marker.fieldList[0].value}</strong>`)
    }

    detailClose.unbind().on('click', function(){
      selectedIndex = -1
      pageWrapper.removeClass('open-detail')
      marker.setIcon(marker.iconIdle)
      detailTitle.text('')
      textPinName.val('')
      textPinSupervisor.val('')
      conditionField[0].name.val('')
      conditionField[0].condition.val('')
      conditionField[0].target.val('')
      conditionField[0].status.addClass('hidden').html('')
      mapincGoogleMap[mapName].setOptions({'draggable': true, 'scrollwheel': true})
    })
    mapincGoogleMap[mapName].setZoom(15)
    mapincGoogleMap[mapName].panTo({lat:marker.position.lat(), lng:marker.position.lng() + 0.00909})
    mapincGoogleMap[mapName].setOptions({'draggable': false, 'scrollwheel': false})
  })

  markPinDrops.push(marker)
}

function initMapData(selectedDate){
  markPinDrops.forEach(function(marker){
    marker.setMap(null)
  })
  markPinDrops = []
  pageLoading.removeClass('hidden')
  // AJAX GOES HERE - START
  var jsonFile = null
  var tempRandom = Math.floor(Math.random() * 2) + 1

  if(tempRandom == 1){
    var jsonFile = [
      {
        "name": "Branch #1",
        "type": 1,
        "pos": {
          "lat": -6.218676180343762,
          "lng": 106.78157329559326
        },
        "fieldList": [
          {
            "type": "NUMBER",
            "name": "Sales",
            "condition": "GT",
            "target": 10000,
            "value": 12000
          }
        ],
        "supervisor": "ari@adiprana.com",
        "isAdd": false,
        "isPass": true
      },
      {
        "name": "Branch #2",
        "type": 1,
        "pos": {
          "lat": -6.179680921992185,
          "lng": 106.96040153503418
        },
        "fieldList": [
          {
            "type": "NUMBER",
            "name": "Sales",
            "condition": "LT",
            "target": 5000,
            "value": 4921
          }
        ],
        "supervisor": "john@doe.com",
        "isAdd": false,
        "isPass": true
      },
      {
        "name": "Branch #3",
        "type": 1,
        "pos": {
          "lat": -6.222985107282696,
          "lng": 106.82015419006348
        },
        "fieldList": [
          {
            "type": "NUMBER",
            "name": "Sales",
            "condition": "LT",
            "target": 50000,
            "value": 67129
          }
        ],
        "supervisor": "ivan@gerard.com",
        "isAdd": false,
        "isPass": false
      }
    ]
  } else if(tempRandom == 2){
    var jsonFile = [
      {
        "name": "Branch #1",
        "type": 1,
        "pos": {
          "lat": -6.218676180343762,
          "lng": 106.78157329559326
        },
        "fieldList": [
          {
            "type": "NUMBER",
            "name": "Sales",
            "condition": "GT",
            "target": 10000,
            "value": 12000
          }
        ],
        "supervisor": "ari@adiprana.com",
        "isAdd": false,
        "isPass": true
      },
      {
        "name": "Branch #2",
        "type": 1,
        "pos": {
          "lat": -6.179680921992185,
          "lng": 106.96040153503418
        },
        "fieldList": [
          {
            "type": "NUMBER",
            "name": "Sales",
            "condition": "LT",
            "target": 5000,
            "value": 4921
          }
        ],
        "supervisor": "john@doe.com",
        "isAdd": false,
        "isPass": true
      },
      {
        "name": "Branch #3",
        "type": 1,
        "pos": {
          "lat": -6.222985107282696,
          "lng": 106.82015419006348
        },
        "fieldList": [
          {
            "type": "NUMBER",
            "name": "Sales",
            "condition": "LT",
            "target": 50000,
            "value": 67129
          }
        ],
        "supervisor": "ivan@gerard.com",
        "isAdd": false,
        "isPass": true
      }
    ]
  }

  setTimeout(function(){
    pageLoading.addClass('hidden')
    jsonFile.forEach(function(item){
      initMarker(item)
    })
  }, 1000)
  // AJAX GOES HERE - END
}

function initMarkTrigger(){
  function initCurrentMark(type, pointer){
    currentMarkType = type
    currentMark.empty().append(pointer.html())
    pointer.closest('ul').find('li a').removeClass('active')
    pointer.addClass('active')
  }

  selectHand.unbind().on("click", function(event){
    event.preventDefault()
    detailClose.trigger('click')
    forceCloseCalendar = true
    datepickerButton.trigger('click')
    if(forceOpenDetail){
      forceOpenDetail = false
      new google.maps.event.trigger(markPinDrops[markPinDrops.length-1], 'click')
    } else {
      initCurrentMark(1, $(this))
      if(drawingManager){
        drawingManager.setMap(null)
        drawingManager.setOptions({
          drawingMode: null
        })

        drawingManager.setMap(mapincGoogleMap[mapName])
      }
    }
  })

  pinDrop.unbind().on("click", function(event){
    event.preventDefault()
    detailClose.trigger('click')
    forceCloseCalendar = true
    datepickerButton.trigger('click')
    initCurrentMark(2, $(this))
    if(drawingManager){
      drawingManager.setMap(null)
      drawingManager.setOptions({
        drawingMode: google.maps.drawing.OverlayType.MARKER
      })

      drawingManager.setMap(mapincGoogleMap[mapName])
    }
  })

  areaMark.unbind().on("click", function(event){
    event.preventDefault()
    detailClose.trigger('click')
    forceCloseCalendar = true
    datepickerButton.trigger('click')
    initCurrentMark(3, $(this))
    if(drawingManager){
      drawingManager.setMap(null)
      drawingManager.setOptions({
        drawingMode: google.maps.drawing.OverlayType.POLYGON
      })

      drawingManager.setMap(mapincGoogleMap[mapName])
    }
  })

  circleMark.unbind().on("click", function(event){
    event.preventDefault()
    detailClose.trigger('click')
    forceCloseCalendar = true
    datepickerButton.trigger('click')
    initCurrentMark(4, $(this))
    if(drawingManager){
      drawingManager.setMap(null)
      drawingManager.setOptions({
        drawingMode: google.maps.drawing.OverlayType.CIRCLE
      })

      drawingManager.setMap(mapincGoogleMap[mapName])
    }
  })

  datepickerInput.datepicker({
    dateFormat: dateFormatText,
    maxDate: 0,
    onSelect:function(value, date){
      datepickerInput.addClass('hidden')
      datepickerButton.find('span').text(value)

      initMapData($.datepicker.formatDate(dateFormatInput, datepickerInput.datepicker('getDate')))
    }
  })

  datepickerButton.find('span').text($.datepicker.formatDate(dateFormatText, datepickerInput.datepicker('getDate')))
  initMapData($.datepicker.formatDate(dateFormatInput, new Date()))
  datepickerButton.unbind().on('click', function(event){
    event.preventDefault()

    if(forceCloseCalendar){
      datepickerInput.addClass('hidden')
      forceCloseCalendar = false
    } else {
      detailClose.trigger('click')
      if(datepickerInput.hasClass('hidden')) datepickerInput.removeClass('hidden')
      else datepickerInput.addClass('hidden')
    }
  })

  // var testtest = document.getElementById('txt-dashboard-search')
  // var searchBox = new google.maps.places.SearchBox(testtest)
  // mapincGoogleMap[mapName].controls[google.maps.ControlPosition.TOP_LEFT].push(testtest)
  //
  // // Bias the SearchBox results towards current map's viewport.
  // mapincGoogleMap[mapName].addListener('bounds_changed', function(){
  //   searchBox.setBounds(mapincGoogleMap[mapName].getBounds())
  // })
  //
  // var searchMarkers = []
  // // Listen for the event fired when the user selects a prediction and retrieve
  // // more details for that place.
  // searchBox.addListener('places_changed', function(){
  //   var places = searchBox.getPlaces()
  //   if(places.length == 0) return
  //
  //   // Clear out the old searchMarkers.
  //   searchMarkers.forEach(function(marker){
  //     marker.setMap(null)
  //   })
  //   searchMarkers = []
  //
  //   // For each place, get the icon, name and location.
  //   var bounds = new google.maps.LatLngBounds()
  //   places.forEach(function(place) {
  //     if (!place.geometry) {
  //       console.log("Returned place contains no geometry")
  //       return
  //     }
  //
  //     var icon = {
  //       url: place.icon,
  //       size: new google.maps.Size(71, 71),
  //       origin: new google.maps.Point(0, 0),
  //       anchor: new google.maps.Point(17, 34),
  //       scaledSize: new google.maps.Size(25, 25)
  //     }
  //
  //     // Create a marker for each place.
  //     searchMarkers.push(new google.maps.Marker({
  //       map: mapincGoogleMap[mapName],
  //       icon: icon,
  //       title: place.name,
  //       position: place.geometry.location
  //     }))
  //
  //     if (place.geometry.viewport) bounds.union(place.geometry.viewport)
  //     else bounds.extend(place.geometry.location)
  //   })
  //   mapincGoogleMap[mapName].fitBounds(bounds)
  // })
}

function initMapAction(){
  iconImage = '/images/marker-pin-passive.png'

  drawingManager = new google.maps.drawing.DrawingManager({
    drawingMode: google.maps.drawing.OverlayType.POLYGON,
    drawingControl: false,
    markerOptions: {icon: iconImage},
    polygonOptions: {
      fillColor: mapincColorMain2,
      fillOpacity: 0.4,
      strokeColor: mapincColorMain1,
      strokeWeight: 2,
      editable: true
    },
    circleOptions: {
      fillColor: mapincColorMain2,
      fillOpacity: 0.4,
      strokeColor: mapincColorMain1,
      strokeWeight: 2,
      clickable: false,
      editable: true,
      zIndex: 1
    }
  })

  google.maps.event.addListener(drawingManager, 'overlaycomplete', function (e) {
    var newMarker = {
      "title": null,
      "type": null,
      "pos": {
        "lat": e.overlay.position.lat(),
        "lng": e.overlay.position.lng()
      },
      "fieldList": [
        {
          "type": "NUMBER",
          "name": null,
          "condition": null,
          "target": null,
          "value": null
        }
      ],
      "supervisor": null,
      "isAdd": true,
      "isPass": false
    }

    var tempMarker = e.overlay
    tempMarker.setMap(null)

    if(e.type === google.maps.drawing.OverlayType.MARKER){
      newMarker.type = 1
      initMarker(newMarker)
      forceOpenDetail = true
      selectHand.trigger('click')
    }
  })

  markerDelete.unbind().on('click', function(){
    markerSave.blur()
    markPinDrops[selectedIndex].setMap(null)
    detailClose.trigger('click')
    // AJAX DELETE GOES HERE - START
    // AJAX DELETE GOES HERE - END
  })

  markerSave.unbind().on('click', function(){
    markerSave.blur()
    markPinDrops[selectedIndex].title = textPinName.val().trim()
    markPinDrops[selectedIndex].fieldList = [
      {
        type: 'number',
        name: conditionField[0].name.val().trim(),
        condition: conditionField[0].condition.val().trim(),
        target: conditionField[0].target.val().trim(),
        value: markPinDrops[selectedIndex].fieldList[0].value
      }
    ]
    markPinDrops[selectedIndex].supervisor = textPinSupervisor.val().trim()
    if(markPinDrops[selectedIndex].isAdd){
      markPinDrops[selectedIndex].isAdd = false
      markPinDrops[selectedIndex] = initMarkerIcon(markPinDrops[selectedIndex])
      // AJAX SAVE UPDATE GOES HERE - START
      // AJAX SAVE UPDATE GOES HERE - END
    }
    detailClose.trigger('click')
  })
}

function initDashboard(){
  initMarkTrigger()
  initMapAction()
}

$(function(){
  verify(initDashboard(), false, 'p.signin.html')
})
